name: Unit tests
permissions:
  contents: read
on: 
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
  - cron: '15 10 * * 1' # run "At 10:15 on Monday"

jobs:
  # Run code tests before building the image, to ensure it is good to go
  unit-tests:
    name: Run code tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12'] # Using a list so it's extensible for future use
    services:
      # label used to access the service container
      postgres:
        # dockerhub image
        image: postgres
        # provide the login and db deets for postgres
        env:
          POSTGRES_DB: ${{ secrets.TEST_DB_NAME }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          POSTGRES_USER: ${{ secrets.TEST_DB_USER }}
        ports:
          # maps tcp port 5432 on service container to the host
          - 5432:5432
        # set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        #  --mount type=tmpfs,destination=/var/lib/postgresql/data
    steps:

      - name: Install postgres client
        run: |
          sudo apt-get update && sudo apt-get install --yes --no-install-recommends sed postgresql-client

      - uses: actions/checkout@v4
      - name: Setting up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

        # have to create an .env file to be able to run unit tests
      - name: Create .env file from github secrets
        run: |
          echo "${{ secrets.ENV_FILE }}" > auctionhouse/.env

      #- name: Set env as secret
      #  env:
      #    MY_VAL: ${{ secrets.ENV_FILE }}
      #  run: |
      #    import os
      #    for q in (os.getenv("MY_VAL")):
      #      print(q)
      #  shell: python

      - name: Run unit tests and coverage reports
        run: |
          echo "creating logfile"
          echo "$GITHUB_WORKSPACE/auctionhouse.log"
          echo "==============="
          touch "$GITHUB_WORKSPACE/auctionhouse.log"
          echo "changing logfile permissions to read/write all"
          chmod a+rw "$GITHUB_WORKSPACE/auctionhouse.log"
          echo "RUNNING MIGRATE"
          python manage.py migrate auction zero
          python manage.py migrate --fake auction zero
          rm -rf migrations
          python manage.py makemigrations auction
          python manage.py migrate --fake auction
          coverage run --omit="*/migrations/*,*/tests/*"  manage.py test 
          coverage xml
          echo "$(coverage report -m )"
          covRes="$(coverage report -m --fail-under=45)"
          echo "$covRes"

      - name: Create coverage badges
        uses: gaelgirodon/ci-badges-action@v1
        with:
          gist-id: d99b55c1eeb7ed01c7c81072b66b6cfb
          token: ${{ secrets.GIST_TOKEN }}